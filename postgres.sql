-- ENUM Type for listing status (UC specific)
-- Provides data integrity and can be more efficient than VARCHAR
CREATE TYPE listing_status_enum AS ENUM (
    'active',
    'pending',
    'sold',
    'withdrawn',
    'expired'
    -- Add other relevant statuses as needed
);

-- Independent tables (Referential Integrity Hubs)
CREATE TABLE "brokers" (
  "brokered_by" INT PRIMARY KEY,
  "broker_name" VARCHAR(255) NOT NULL
);
-- Index for searching brokers by name if that's a common lookup
CREATE INDEX IF NOT EXISTS idx_brokers_broker_name ON "brokers"("broker_name" varchar_pattern_ops);


CREATE TABLE "zip_codes" (
  "zip_code" INT PRIMARY KEY, -- Assuming numeric zip codes as per original. If alphanumeric, use VARCHAR.
  "city" VARCHAR(100),
  "state" VARCHAR(100)
);
-- Index for finding zip codes based on city (UC1, UC4b, UC5)
CREATE INDEX IF NOT EXISTS idx_zip_codes_city ON "zip_codes"("city");
-- Could also index state if filtering by state is common:
CREATE INDEX IF NOT EXISTS idx_zip_codes_state_city ON "zip_codes"("state", "city");


-- Core table: Listings
CREATE TABLE "listings" (
  "listing_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "brokered_by" INT NOT NULL,
  "status" listing_status_enum,       -- Using ENUM type
  "price" NUMERIC(14, 2),            -- Changed from FLOAT to NUMERIC for precision (e.g., 12 digits, 2 decimal places)
  "prev_sold_date" DATE,

  CONSTRAINT "fk_listings_broker"
    FOREIGN KEY ("brokered_by")
    REFERENCES "brokers"("brokered_by")
    ON DELETE RESTRICT -- Good default to prevent deleting a broker with active listings
);
-- Indices for listings table:
-- fk_listings_broker already creates an index on brokered_by
CREATE INDEX IF NOT EXISTS idx_listings_price ON "listings"("price"); -- For UC1, UC4a, UC4b
CREATE INDEX IF NOT EXISTS idx_listings_status ON "listings"("status"); -- If filtering by status is frequent
CREATE INDEX IF NOT EXISTS idx_listings_brokered_by_price ON "listings"("brokered_by", "price"); -- For UC2 (updates), UC4


-- Details related to the structure/estate (0..1 relationship with listings)
CREATE TABLE "estate_details" (
  "listing_id" INT PRIMARY KEY,      -- Also a Foreign Key
  "bed" INT,
  "bath" INT,
  "house_size" NUMERIC(10, 2),     -- Changed from FLOAT to NUMERIC (e.g., up to 99,999,999.99 sq units)
  "solar_panels" BOOLEAN DEFAULT FALSE, -- New attribute for UC3, with a default

  CONSTRAINT "fk_estate_details_listing"
    FOREIGN KEY ("listing_id")
    REFERENCES "listings"("listing_id")
    ON DELETE CASCADE -- If listing is deleted, these details are removed
);
-- Indices for estate_details:
-- listing_id is indexed by PK
CREATE INDEX IF NOT EXISTS idx_estate_details_bed ON "estate_details"("bed"); -- For UC6
CREATE INDEX IF NOT EXISTS idx_estate_details_house_size ON "estate_details"("house_size"); -- For UC4a, UC5, UC6
-- Composite index for common filter combinations (UC6)
CREATE INDEX IF NOT EXISTS idx_estate_details_bed_house_size ON "estate_details"("bed", "house_size");
-- Partial index if you frequently query for listings WITH solar panels (UC3 related queries)
CREATE INDEX IF NOT EXISTS idx_estate_details_has_solar_panels ON "estate_details"("listing_id") WHERE "solar_panels" IS TRUE;


-- Details related to land (1..1 relationship with listings)
CREATE TABLE "land_data" (
  "listing_id" INT PRIMARY KEY,      -- Also a Foreign Key
  "area_size_in_square_m" NUMERIC(12, 2), -- Changed from FLOAT to NUMERIC

  CONSTRAINT "fk_land_data_listing"
    FOREIGN KEY ("listing_id")
    REFERENCES "listings"("listing_id")
    ON DELETE CASCADE -- If listing is deleted, land data is removed
);
-- Indices for land_data:
-- listing_id is indexed by PK
CREATE INDEX IF NOT EXISTS idx_land_data_area_size ON "land_data"("area_size_in_square_m"); -- For UC4a, UC5


-- Address information (1..1 relationship with listings)
CREATE TABLE "addresses" (
  "listing_id" INT PRIMARY KEY,      -- Also a Foreign Key
  "street" VARCHAR(255) NOT NULL,
  "zip_code" INT NOT NULL,           -- Must match the type in "zip_codes" table

  CONSTRAINT "fk_addresses_listing"
    FOREIGN KEY ("listing_id")
    REFERENCES "listings"("listing_id")
    ON DELETE CASCADE, -- If listing is deleted, address is removed
  CONSTRAINT "fk_addresses_zip_code"
    FOREIGN KEY ("zip_code")
    REFERENCES "zip_codes"("zip_code")
    ON DELETE RESTRICT -- Prevent deleting a zip_code if addresses reference it
);
-- Indices for addresses:
-- listing_id is indexed by PK
-- fk_addresses_zip_code already creates an index on zip_code
-- Could add a composite index if searching by street within a zip code is common:
-- CREATE INDEX IF NOT EXISTS idx_addresses_zip_code_street ON "addresses"("zip_code", "street" varchar_pattern_ops);